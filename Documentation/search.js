window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "Reactpy", "modulename": "Reactpy", "kind": "module", "doc": "<p>This package provides the tools the are needed in order to simulate numerically a nucler fission reactor.</p>\n\n<h2 id=\"modules\">Modules:</h2>\n\n<ul>\n<li><code>ControlRods</code>: provides functions that can generate predefined controld rods dynamics.</li>\n<li><code>Functions</code>: useful fucntions.</li>\n<li><code>IntegrationsMethods</code>: different optimizations for linear algebra methods used during integration.</li>\n<li><code>SolvePDE</code>: all you need to numerically integrate the PDE of the neutron diffusion of a nucleat reactor.</li>\n</ul>\n"}, {"fullname": "Reactpy.ControlRods", "modulename": "Reactpy.ControlRods", "kind": "module", "doc": "<p>This module provvides some functions that can generate the time evolution of the control rods.</p>\n\n<p>Each function returns a float number in $[0,1]$ which must then be multiplied \nby the matrix representing the control rods disposition.</p>\n\n<h6 id=\"functions\">Functions</h6>\n\n<ul>\n<li><code>linear_cycle</code>: returns value of of control bars at given time, throught a linear cycle.</li>\n<li><code>shutdown</code>: returns value of of control bars at given time: it is simualted a scenario in which all control rods\nare fully inserted instanenusely.</li>\n</ul>\n"}, {"fullname": "Reactpy.ControlRods.linear_cycle", "modulename": "Reactpy.ControlRods", "qualname": "linear_cycle", "kind": "function", "doc": "<p>Reproduces the percentage of insertion of control rods at a given time <code>t</code>.\nThe full time evolution is splitted in $5$ time periods in which the values returned \nchanges linearly or stay constant:</p>\n\n<ul>\n<li>for <code>t</code> * <code>delta_t</code> &lt; 10% <code>t_max</code>}  the the level of the rods is lowered from $100\\%$ to $0\\%$,</li>\n<li>for 10% <code>t_max</code> &lt; <code>t</code> * <code>delta_t</code> &lt; 20% <code>t_max</code> all the rods are extracted $(0\\%)$,</li>\n<li>for 20% <code>t_max</code> &lt; <code>t</code> * <code>delta_t</code> &lt; 30% <code>t_max</code> the rods are progressively inserted until $ss_{lvl}$ level is reached,</li>\n<li>for 30% <code>t_max</code> &lt; <code>t</code> * <code>delta_t</code> &lt; 80% <code>t_max</code> the rods are kept at fixed insertion value $ss_{lvl}$,</li>\n<li>for 80% <code>t_max</code> &lt; <code>t</code> * <code>delta_t</code> &lt; <code>t_max</code> all the rods are fully inserted.</li>\n</ul>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong><code>t</code></strong> (float):\nTime (iteration) at which the rod insertion level is returned.</li>\n<li><strong><code>delta_t</code></strong> (float):\nTime step between iterations.</li>\n<li><strong><code>t_max</code></strong> (float):\ntime duration of the cycle. (This is actual time in seconds)</li>\n<li><strong><code>ss_lvl</code></strong> (float):\nInsertion level kept during steady state operation of the reactor.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: Insertion level of the control rods a time <code>t</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">t</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">delta_t</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">t_max</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">ss_lvl</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "Reactpy.ControlRods.shutdown", "modulename": "Reactpy.ControlRods", "qualname": "shutdown", "kind": "function", "doc": "<p>Reproduces the percentage of insertion of control rods at a given time <code>t</code>.\nThe full time evolution is splitted in $2$ time periods in which the values returned \nchanges linearly or stay constant:</p>\n\n<ul>\n<li>for the first half of <code>t_max</code> all the rods are inserted for percentage <code>ss_lvl</code>,</li>\n<li>all the control rods are immediately fully inserted.</li>\n</ul>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong><code>t</code></strong> (float):\nTime (iteration) at which the rod insertion level is returned.</li>\n<li><strong><code>delta_t</code></strong> (float):\nTime step between iterations.</li>\n<li><strong><code>t_max</code></strong> (float):\ntime duration of the cycle. (This is actual time in seconds)</li>\n<li><strong><code>ss_lvl</code></strong> (float):\nInsertion level kept during steady state operation of the reactor.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>float</strong>: Insertion level of the control rods a time <code>t</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">t</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">delta_t</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">t_max</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">ss_lvl</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "Reactpy.ControlRods.linear_cycle_array", "modulename": "Reactpy.ControlRods", "qualname": "linear_cycle_array", "kind": "function", "doc": "<p>Returns an array containing the values, at different iterations steps, of the intertion level of the control rods,\n following the <code>linear_cycle</code> scheme. </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong><code>delta_t</code></strong> (float):\nTime step between iterations.</li>\n<li><strong><code>t_max</code></strong> (float):\ntime duration of the cycle. (This is actual time in seconds)</li>\n<li><strong><code>ss_lvl</code></strong> (float):\nInsertion level kept during steady state operation of the reactor.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>np.ndarray</strong>: Array containg squential values over time of the insterion level of the control rods.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">delta_t</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">t_max</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">ss_lvl</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "Reactpy.ControlRods.shutdown_array", "modulename": "Reactpy.ControlRods", "qualname": "shutdown_array", "kind": "function", "doc": "<p>Returns an array containing the values, at different iterations steps, of the intertion level of the control rods,\nfollowing the <code>shutdown</code> shceme.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong><code>delta_t</code></strong> (float):\nTime step between iterations.</li>\n<li><strong><code>t_max</code></strong> (float):\ntime duration of the cycle. (This is actual time in seconds)</li>\n<li><strong><code>ss_lvl</code></strong> (float):\nInsertion level kept during steady state operation of the reactor.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>np.ndarray</strong>: Array containg squential values over time of the insterion level of the control rods.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">delta_t</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">t_max</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">ss_lvl</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "Reactpy.Functions", "modulename": "Reactpy.Functions", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "Reactpy.Functions.vector_to_matrix", "modulename": "Reactpy.Functions", "qualname": "vector_to_matrix", "kind": "function", "doc": "<p>Converts a vector into matrix of specified size.</p>\n\n<p>Given the tuple $(n, m)$, every n components of the <code>vector</code> are turned into a row:\nin this way the matrix element $(i, j)$ corresponds to the <code>vector</code> component $i+j*m$.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong><code>vector</code></strong> (np.ndarray):\n1-D representation of the matricial data.</li>\n<li><strong><code>size</code></strong> (tuple):\nNumber of (row, column) of the matrix.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>np.ndarray</strong>: Matricial representation of the data contained into <code>vector</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">vector</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">size</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "Reactpy.Functions.matrix_to_vector", "modulename": "Reactpy.Functions", "qualname": "matrix_to_vector", "kind": "function", "doc": "<p>Converts a matrix of specified size into a vector.</p>\n\n<p>All the rows become just one vector, from top to bottom:\nin this way the <code>matrix</code> element $(i, j)$ corresponds to the vector component $i+j*m$.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong><code>matrix</code></strong> (np.ndarray):\n2-D representation of the vectorial data.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>np.ndarray</strong>: Vectorial representation of the data contained into <code>matrix</code>.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">matrix</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "Reactpy.Functions.file_read_as_matrix", "modulename": "Reactpy.Functions", "qualname": "file_read_as_matrix", "kind": "function", "doc": "<p>Reads from file a matrix and returns a 2-D list containing its entries.</p>\n\n<p>The matrix can contain both letters and numbers (interger, float).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>filename</strong> (str):\nPath to the file containing the data.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list</strong>: 2-D list that represents the matrix.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "Reactpy.Functions.file_read_as_vector", "modulename": "Reactpy.Functions", "qualname": "file_read_as_vector", "kind": "function", "doc": "<p>Reads from file a vector and returns a 1-D list containing its entries.</p>\n\n<p>The vector can contain both letters and numbers (interger, float).</p>\n\n<p>If the file contains more rows, those are attached one after the other.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>filename</strong> (str):\nPath to the file containing the data.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list</strong>: 1-D list that represents the matrix.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span>:</span></span>", "funcdef": "def"}, {"fullname": "Reactpy.IntegrationsMethods", "modulename": "Reactpy.IntegrationsMethods", "kind": "module", "doc": "<p>This module provides alternative ways to integrate PDE equation usign different\ntypes of optimizations, from <code>Numba</code> and <code>Scipy</code>.</p>\n\n<p>For performance it is best to use <code>nopython_integrate</code> for smaller grids, while <code>sci_integrate</code> becomes\nsignificantly faster for bigger grids (almost 2x on a 50x50 grid).</p>\n\n<p>Please, do not use <code>parallel_integration</code> since it was just a sort of experiment and it is by far the slowest.</p>\n\n<h2 id=\"functions\">Functions:</h2>\n\n<ul>\n<li><code>parallel_dot</code>: implements the matrix vector multiplication expoiting parallelization of Numba,</li>\n<li><code>nopython_integrate</code>: implement numerical integration of a given PDE by compiling the fucntion in Numba _nopython_ mode,</li>\n<li><code>paralell_integrate</code>: utilizing <code>parallel_dot</code>, integrate a given PDE in <code>nopython</code> mode and with parallel matrix multiplication.</li>\n<li><code>sci_integrate</code>: exploits Scipy linear algebra methods for sparce matrices.</li>\n</ul>\n"}, {"fullname": "Reactpy.IntegrationsMethods.parallel_dot", "modulename": "Reactpy.IntegrationsMethods", "qualname": "parallel_dot", "kind": "function", "doc": "<p>Implementation of vector matrix product with parallelization, using Numba.</p>\n\n<p>Given $M_{ij}$ and $V_{i}$, returns $$W_{i}=\\sum_{j} A_{ij} V_j.$$</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong><code>matrix</code></strong> (np.ndarray):\n2D array, which the first factor of the product.</li>\n<li><strong>vector</strong> (_type_):\n1D array, which is the second factor of the product.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>np.ndarray</strong>: Result 1D array (vector).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">matrix</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">vector</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Reactpy.IntegrationsMethods.nopython_integrate", "modulename": "Reactpy.IntegrationsMethods", "qualname": "nopython_integrate", "kind": "function", "doc": "<p>Performs numerical integration of a given statuonary PDE using Numba _nopython_ compliation, for better performances. </p>\n\n<p>The solution in obatined using successive relaxation method:</p>\n\n<ol>\n<li>first, the PDE_matrix is decomposed into its lower tringular component $L$\nand the upper one $-U$</li>\n<li>iterating, from an initial guess,\n$$\\vec \\phi_{n}= L^{-1}U \\vec \\phi_{n-1}+L^{-1} \\vec S,$$ where $\\vec S$ is\n<code>sources</code>, we obtain approximations of the solution</li>\n<li>a better approxiamtion is reached by weighting $\\phi_n'= \\phi_n\\omega+ (1-\\omega)\\phi_{n-1}$</li>\n<li>when $ \\|\\phi_{n}-\\phi_{n-1}|<$ <code>conv_criterion</code> convergence is met.</li>\n</ol>\n\n<p>Overall, this tested to be the best integration method performace-wise.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>phi</strong> (np.ndarray):\n1D array containing the initial guess of the solution.</li>\n<li><strong>PDE_matrix</strong> (np.ndarray):\n2D array describing the PDE.</li>\n<li><strong>sources</strong> (np.ndarray):\n1D array representing the sources terms of the PDE.</li>\n<li><strong>omega</strong> (float):\nWeight between the previous iteration solution and the solution at the new iteration.</li>\n<li><strong>conv_criterion</strong> (float):\nCriterion of convergence: if the norm of two consecuitive solutions (vectors)\nis smaller that this parameter convergence is met.</li>\n<li><strong>empty_cells</strong> (np.ndarray):\n1D array listing positions in the grid of simulation (tuples) of the empty cells.</li>\n<li><strong>grid_size</strong> (np.ndarray):\n1D array containing the size (rows, columns) of the grid of over which we integrate.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>np.ndarray</strong>: 1D array containing the converged solution.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">phi</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">PDE_matrix</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">sources</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">omega</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">conv_criterion</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">empty_cells</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">grid_size</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "Reactpy.IntegrationsMethods.paralell_integrate", "modulename": "Reactpy.IntegrationsMethods", "qualname": "paralell_integrate", "kind": "function", "doc": "<p>Performs numerical integration of a given statuonary PDE using Numba _nopython_ compliation \nand parallelization of matrix multiplications, for better performances. </p>\n\n<p>The solution in obatined using successive relaxation method:</p>\n\n<ol>\n<li>first, the PDE_matrix is decomposed into its lower tringular component $L$\nand the upper one $-U$</li>\n<li>iterating, from an initial guess,\n$$\\vec \\phi_{n}= L^{-1}U \\vec \\phi_{n-1}+L^{-1} \\vec S,$$ where $\\vec S$ is\n<code>sources</code>, we obtain approximations of the solution</li>\n<li>a better approxiamtion is reached by weighting $\\phi_n'= \\phi_n\\omega+ (1-\\omega)\\phi_{n-1}$</li>\n<li>when $ \\|\\phi_{n}-\\phi_{n-1}|<$ <code>conv_criterion</code> convergence is met.</li>\n</ol>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>phi</strong> (np.ndarray):\n1D array containing the initial guess of the solution.</li>\n<li><strong>PDE_matrix</strong> (np.ndarray):\n2D array describing the PDE.</li>\n<li><strong>sources</strong> (np.ndarray):\n1D array representing the sources terms of the PDE.</li>\n<li><strong>omega</strong> (float):\nWeight between the previous iteration solution and the solution at the new iteration.</li>\n<li><strong>conv_criterion</strong> (float):\nCriterion of convergence: if the norm of two consecuitive solutions (vectors)\nis smaller that this parameter convergence is met.</li>\n<li><strong>empty_cells</strong> (np.ndarray):\n1D array listing positions in the grid of simulation (tuples) of the empty cells.</li>\n<li><strong>grid_size</strong> (np.ndarray):\n1D array containing the size (rows, columns) of the grid of over which we integrate.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>np.ndarray</strong>: 1D array containing the converged solution.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">phi</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">PDE_matrix</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">sources</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">omega</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">conv_criterion</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">empty_cells</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">grid_size</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "Reactpy.IntegrationsMethods.sci_integrate", "modulename": "Reactpy.IntegrationsMethods", "qualname": "sci_integrate", "kind": "function", "doc": "<p>Performs numerical integration of a given statuonary PDE using Scipy sparce matrix methods, for better performances. </p>\n\n<p>The solution in obatined using successive relaxation method:</p>\n\n<ol>\n<li>first, the PDE_matrix is decomposed into its lower tringular component $L$\nand the upper one $-U$</li>\n<li>iterating, from an initial guess,\n$$\\vec \\phi_{n}= L^{-1}U \\vec \\phi_{n-1}+L^{-1} \\vec S,$$ where $\\vec S$ is\n<code>sources</code>, we obtain approximations of the solution</li>\n<li>a better approxiamtion is reached by weighting $\\phi_n'= \\phi_n\\omega+ (1-\\omega)\\phi_{n-1}$</li>\n<li>when $ \\|\\phi_{n}-\\phi_{n-1}|<$ <code>conv_criterion</code> convergence is met.</li>\n</ol>\n\n<p>For larger matrixes this implementation can be faster than <code>nopython_integrate</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>phi</strong> (np.ndarray):\n1D array containing the initial guess of the solution.</li>\n<li><strong>PDE_matrix</strong> (np.ndarray):\n2D array describing the PDE.</li>\n<li><strong>sources</strong> (np.ndarray):\n1D array representing the sources terms of the PDE.</li>\n<li><strong>omega</strong> (float):\nWeight between the previous iteration solution and the solution at the new iteration.</li>\n<li><strong>conv_criterion</strong> (float):\nCriterion of convergence: if the norm of two consecuitive solutions (vectors)\nis smaller that this parameter convergence is met.</li>\n<li><strong>empty_cells</strong> (np.ndarray):\n1D array listing positions in the grid of simulation (tuples) of the empty cells.</li>\n<li><strong>grid_size</strong> (np.ndarray):\n1D array containing the size (rows, columns) of the grid of over which we integrate.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>np.ndarray</strong>: 1D array containing the converged solution.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">phi</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">tmp_PDE_matrix</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">sources</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">omega</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">conv_criterion</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">empty_cells</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">grid_size</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "Reactpy.SolvePDE", "modulename": "Reactpy.SolvePDE", "kind": "module", "doc": "<p>This module provides a set of classes that can be utilized to perform numerical integration of stationary PDEs.</p>\n\n<p>These classes create a discretized configuartion space for the PDE, then using succesive relaxation method, they estimate the \nstationary solution to the given PDE.</p>\n\n<p>The class <code>Cell</code> represent the single spacial element of the discretization, containing its numerical proprieties such as the position,\nthen the <code>Grid</code> class groups toghether all the <code>Cell</code> istances and gives to the user the methods needed to represent the discretized PDE.\nLastly, the class <code>Solver</code> manages the integration of the PDE.</p>\n"}, {"fullname": "Reactpy.SolvePDE.Cell", "modulename": "Reactpy.SolvePDE", "qualname": "Cell", "kind": "class", "doc": "<p>Represents a single element (cell) in the discretized reactor configuration space.\n   This class is used to keep track of all the discretized variables that depends on space positions.</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong><code>flux</code></strong> (float):\nNeutron flux in the cell.</li>\n<li><strong><code>position</code></strong> (tuple):\nCoordinates of the cell in a grid.</li>\n<li><strong><code>type</code></strong> (str={\"Flux\", \"Empty\"}):\nType of the cell, e.g. whether it is empty or not.</li>\n</ul>\n"}, {"fullname": "Reactpy.SolvePDE.Cell.__init__", "modulename": "Reactpy.SolvePDE", "qualname": "Cell.__init__", "kind": "function", "doc": "<p>Initiates a cell in specified <code>position</code> and with specified <code>flux</code> and <code>type</code></p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong><code>flux</code></strong> (float):\nNeutron flux of the cell.</li>\n<li><strong><code>position</code></strong> (tuple):\nCoordinates of the cell in a grid.</li>\n<li><strong><code>type</code></strong> (str={\"Flux\", \"Empty\"}):\nType of the cell, e.g. whether it is empty or not.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">flux</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">position</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span>, </span><span class=\"param\"><span class=\"nb\">type</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "Reactpy.SolvePDE.Grid", "modulename": "Reactpy.SolvePDE", "qualname": "Grid", "kind": "class", "doc": "<p>Represents the entire grid used for spatial discretization of the reactor.</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong><code>Delta</code></strong> (float):\nThe discretization step: size of each cell (all equal size).</li>\n<li><strong><code>size</code></strong> (np.ndarray):\nThe maximum number of cells in the grid: (max_x_size, ,max_y_size).</li>\n<li><strong><code>cells_list</code></strong> (np.ndarray):\nThe list of cells of the grid.</li>\n<li><strong><code>empty_cells</code></strong> (np.ndarray):\nThe list of  the coordinates of cells of type <code>Empty</code> in the grid.</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<ul>\n<li><code>flux_vector()</code> :\nReturns a vector containing the fluxes of all the cells.</li>\n<li><code>flux_matrix()</code> :\nReturns a matrix containing the fluxes of all the cells.</li>\n<li><code>first_Xderivative_matrix()</code> :\nReturns the matrix of the discretized partial derivative along the $x$-axis.</li>\n<li><code>first_Yderivative_matrix()</code> :\nReturns the matrix of the discretized partial derivative along the $y$-axis.</li>\n<li><code>second_Xderivative_matrix()</code> :\nReturns the matrix of the discretized partial second derivative along the $x$-axis.</li>\n<li><code>second_Yderivative_matrix()</code> :\nReturns the matrix of the discretized partial second derivative along the $y$-axis.</li>\n</ul>\n"}, {"fullname": "Reactpy.SolvePDE.Grid.__init__", "modulename": "Reactpy.SolvePDE", "qualname": "Grid.__init__", "kind": "function", "doc": "<p>Initializes the grid with the specified size and cells.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong><code>grid_matrix</code></strong> (list):\nA 2-D list describing the geometry of the reactor. The allowed values are:\n<ul>\n<li>float number for cells in which simulate the reactor (the number is the flux),</li>\n<li>\"E\" for cells that are not part of the reactor (they will always have $0$ flux).</li>\n</ul></li>\n<li><strong><code>Delta</code></strong> (float):\nThe discretization step (grid spacing).</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">grid_matrix</span><span class=\"p\">:</span> <span class=\"nb\">list</span>, </span><span class=\"param\"><span class=\"n\">Delta</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span>)</span>"}, {"fullname": "Reactpy.SolvePDE.Grid.flux_vector", "modulename": "Reactpy.SolvePDE", "qualname": "Grid.flux_vector", "kind": "function", "doc": "<p>Returns a vector containing the fluxes of all the cells:\nthe grid is read row by row and then each row is attached one after the other to form the vector.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>np.ndarray</strong>: 1D array that lists the fluxes of all the cells.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>This vector representation is used by <code>Solver.solve()</code> for numerically integration.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "Reactpy.SolvePDE.Grid.flux_matrix", "modulename": "Reactpy.SolvePDE", "qualname": "Grid.flux_matrix", "kind": "function", "doc": "<p>Returns a matrix containing the fluxes of all the cells:\nthe $(i, j)$ element of the matrix represents the cell in the $i$-th column and $j$-th row.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>np.ndarray</strong>: 2D array that lists the fluxes of all the cells.</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>This matrix is usually fed to matplotlib to get a graphical representation of the reactor.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "Reactpy.SolvePDE.Grid.flux_PDE_matrix", "modulename": "Reactpy.SolvePDE", "qualname": "Grid.flux_PDE_matrix", "kind": "function", "doc": "<p>Returns a matrix representing a linear flux term in the PDE.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>np.ndarray</strong>: 2D array that is used to represent linear terms in the PDE.</li>\n</ul>\n\n<h6 id=\"see-also\">See also</h6>\n\n<p><code>Solver</code> : The attribute <code>Solver.PDE_matrix</code> can be created usign this method:</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "Reactpy.SolvePDE.Grid.first_Xderivative_matrix", "modulename": "Reactpy.SolvePDE", "qualname": "Grid.first_Xderivative_matrix", "kind": "function", "doc": "<p>Returns a matrix representing the first partial derivative along the $x$-axsis:\nafter matrix multiplication with the vector returned by <code>flux_vector()</code>, this matrix allows\nto obtain the vector approximating the derivative by the central_ difference_ method.\n$$\\partial_x \\phi\\big|_{i,j} \\approx \\frac{\\phi_{i+1,j} - \\phi_{i-1,j}}{2\\Delta},$$\nwhere $\\phi_{i,j}$ is the fulx in the cell (i, j).</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>np.ndarray</strong>: 2D array that is used to evaluate the partial derivative along the $x$-axis.</li>\n</ul>\n\n<h6 id=\"see-also\">See also</h6>\n\n<p><code>Solver</code> : The attribute <code>Solver.PDE_matrix</code> can be created usign this method:</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "Reactpy.SolvePDE.Grid.first_Yderivative_matrix", "modulename": "Reactpy.SolvePDE", "qualname": "Grid.first_Yderivative_matrix", "kind": "function", "doc": "<p>Returns a matrix representing the first partial derivative along the $y$-axsis:\nafter matrix multiplication with the vector returned by <code>flux_vector()</code>, this matrix allows\nto obtain the vector approximating the derivative by the central_ difference_ method.\n$$\\partial_y \\phi\\big|_{i,j} \\approx \\frac{\\phi_{i,j+1} - \\phi_{i,j-1}}{2\\Delta},$$\nwhere $\\phi_{i,j}$ is the fulx in the cell (i, j).</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>np.ndarray</strong>: 2D array that is used to evaluate the partial derivative along the $y$-axis.</li>\n</ul>\n\n<h6 id=\"see-also\">See also</h6>\n\n<p><code>Solver</code> : The attribute <code>Solver.PDE_matrix</code> can be created usign this method:</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "Reactpy.SolvePDE.Grid.second_Xderivative_matrix", "modulename": "Reactpy.SolvePDE", "qualname": "Grid.second_Xderivative_matrix", "kind": "function", "doc": "<p>Returns a matrix representing the second partial derivative along the $x$-axsis:\nafter matrix multiplication with the vector returned by <code>flux_vector()</code>, this matrix allows\nto obtain the vector approximating the derivative by the central_ difference_ method:\n$$\\partial^2_x \\phi\\big|_{i,j} \\approx \\frac{\\phi_{i+1,j} -2\\phi_{i,j}+ \\phi_{i-1,j}}{\\Delta^2},\n$$ where $\\phi_{i,j}$ is the fulx in the cell (i, j).</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>np.ndarray</strong>: 2D array that is used to evaluate the second partial derivative along the $x$-axis.</li>\n</ul>\n\n<h6 id=\"see-also\">See also</h6>\n\n<p><code>Solver</code> : The attribute <code>Solver.PDE_matrix</code> can be created usign this method.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "Reactpy.SolvePDE.Grid.second_Yderivative_matrix", "modulename": "Reactpy.SolvePDE", "qualname": "Grid.second_Yderivative_matrix", "kind": "function", "doc": "<p>Returns a matrix representing the second partial derivative along the $y$-axsis:\nafter matrix multiplication with the vector returned by <code>flux_vector()</code>, this matrix allows\nto obtain the vector approximating the derivative by the central_ difference_ method:\n$$\\partial^2_y \\phi\\big|_{i,j} \\approx \\frac{\\phi_{i,j+1} -2\\phi_{i,j}+ \\phi_{i,j-1}}{\\Delta^2},\n$$ where $\\phi_{i,j}$ is the fulx in the cell (i, j).</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>np.ndarray</strong>: 2D array that is used to evaluate the second partial derivative along the $y$-axis.</li>\n</ul>\n\n<h6 id=\"see-also\">See also</h6>\n\n<p><code>Solver</code> : The attribute <code>Solver.PDE_matrix</code> can be created usign this method.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>:</span></span>", "funcdef": "def"}, {"fullname": "Reactpy.SolvePDE.Solver", "modulename": "Reactpy.SolvePDE", "qualname": "Solver", "kind": "class", "doc": "<p>Manages the numerical integration of a given stationary PDE.</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong><code>grid</code></strong> (Grid):\nDiscretization of the coordinate space.</li>\n<li><strong><code>PDE_matrix</code></strong> (np.array):\n2D array that represents the discretized stationary PDE to be solved.</li>\n<li><strong><code>sources</code></strong> (np.array):\n2D array that contains the source terms of the PDE.</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<ul>\n<li><code>solve()</code> :\nNumerically finds the best approximation of the stationary solution of a given PDE.</li>\n</ul>\n"}, {"fullname": "Reactpy.SolvePDE.Solver.__init__", "modulename": "Reactpy.SolvePDE", "qualname": "Solver.__init__", "kind": "function", "doc": "<p>Initializes the solver by defining the coordinate space and the PDE with its sources terms.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong><code>grid</code></strong> (Grid):\nDiscretization of the coordinate space.</li>\n<li><strong><code>PDE_matrix</code></strong> (np.array):\n2D array that represents the discretized stationary PDE to be solved.</li>\n<li><strong><code>sources</code></strong> (np.array):\n2D array that contains the source terms of the PDE: these are arranged\nin the array following the\ngeometry of the reactor.</li>\n</ul>\n\n<h6 id=\"see-also\">See also</h6>\n\n<p><code>Grid.first_Xderivative_matrix()</code>, <code>Grid.first_Yderivative_matrix()</code>,\n<code>Grid.second_Xderivative_matrix()</code>\nand <code>Grid.second_Yderivative_matrix()</code>:\n    These methods can generate the matrices that made up the matrix <code>PDE_matrix</code></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">grid</span><span class=\"p\">:</span> <span class=\"n\">Reactpy</span><span class=\"o\">.</span><span class=\"n\">SolvePDE</span><span class=\"o\">.</span><span class=\"n\">Grid</span>,</span><span class=\"param\">\t<span class=\"n\">sources</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">PDE_matrix</span><span class=\"p\">:</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span>)</span>"}, {"fullname": "Reactpy.SolvePDE.Solver.solve", "modulename": "Reactpy.SolvePDE", "qualname": "Solver.solve", "kind": "function", "doc": "<p>Approximates the stationary flux solution.</p>\n\n<p>The solution in obatined using successive relaxation method:</p>\n\n<ol>\n<li>first, the PDE_matrix is decomposed into its lower tringular component $L$\nand the upper one $-U$</li>\n<li>iterating, from an initial guess,\n$$\\vec \\phi_{n}= L^{-1}U \\vec \\phi_{n-1}+L^{-1} \\vec S,$$ where $\\vec S$ is\n<code>sources</code>, we obtain approximations of the solution</li>\n<li>a better approxiamtion is reached by weighting $\\phi_n'= \\phi_n\\omega+ (1-\\omega)\\phi_{n-1}$</li>\n<li>when $ \\|\\phi_{n}-\\phi_{n-1}|<$ <code>conv_criterion</code> convergence is met.</li>\n</ol>\n\n<p>Using the paramenter <code>mode</code>, different optimization options can be selected. \nFor more informations about these optimization consult <code>Reactpy.IntegrationsMethods</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>omega</strong> (float):\nWeight between the previous iteration solution and the solution at the new iteration.</li>\n<li><strong>conv_criterion</strong> (float):\nCriterion of convergence: if the norm of two consecuitive solutions (vectors)\nis smaller that this parameter convergence is met.</li>\n<li><strong>update</strong> (bool):\nIf True the attribute <code>grid</code> is updated with the solution, otherwise only the\nretuned Grid object contains the solution.\n(By default this is False).</li>\n<li><strong>mode</strong> (string):\nDetermine the integration mode:\n<ul>\n<li>\"nopython\" (default) leaves the integration to <code>Numba</code>,</li>\n<li>\"parallel\" parallelize the matrix multiplication with <code>Numba</code>,</li>\n<li>\"Scipy\" uses the <code>Scipy</code> libraries to mange the matrices as sparse matrices.</li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Grid</strong>: New Grid object containing the solution obtained.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">omega</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">conv_criterion</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">update</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">mode</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;nopython&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Reactpy</span><span class=\"o\">.</span><span class=\"n\">SolvePDE</span><span class=\"o\">.</span><span class=\"n\">Grid</span>:</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();